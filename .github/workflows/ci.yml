name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        rust: [stable]

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxkbcommon-dev \
          libssl-dev \
          libfontconfig1-dev \
          pkg-config \
          protobuf-compiler

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: brew install protobuf

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-

    - name: Cache cargo index
      uses: actions/cache@v4
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-

    - name: Cache target directory
      uses: actions/cache@v4
      with:
        path: target
        key: ${{ runner.os }}-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-target-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Build
      run: cargo build --verbose

    - name: Run tests
      run: cargo test --verbose

    - name: Build GUI
      run: cargo build --bin omnitak-gui --verbose

    - name: Build ADB setup tool
      run: cargo build --bin omnitak-adb-setup --verbose

  build:
    name: Build Release Binaries
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: omnitak-linux-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: omnitak-macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            artifact_name: omnitak-macos-aarch64

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libxcb-render0-dev \
          libxcb-shape0-dev \
          libxcb-xfixes0-dev \
          libxkbcommon-dev \
          libssl-dev \
          libfontconfig1-dev \
          pkg-config \
          protobuf-compiler

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: brew install protobuf

    - name: Build release binaries
      run: cargo build --release --target ${{ matrix.target }}

    - name: Package binaries
      shell: bash
      run: |
        mkdir -p dist
        if [ "${{ runner.os }}" = "Windows" ]; then
          cp target/${{ matrix.target }}/release/omnitak.exe dist/
          cp target/${{ matrix.target }}/release/omnitak-gui.exe dist/
          cp target/${{ matrix.target }}/release/omnitak-adb-setup.exe dist/
        else
          cp target/${{ matrix.target }}/release/omnitak dist/
          cp target/${{ matrix.target }}/release/omnitak-gui dist/
          cp target/${{ matrix.target }}/release/omnitak-adb-setup dist/
        fi
        cp README.md dist/
        cp LICENSE-* dist/ 2>/dev/null || true

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact_name }}
        path: dist/
